#!/bin/bash
################################################################################
# Copyright 2021 ModalAI Inc.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# 4. The Software is used solely in conjunction with devices provided by
#    ModalAI Inc.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
################################################################################

NAME="voxl-tflite-server"
SERVICE_FILE="${NAME}.service"
CONFIG_FILE="/etc/modalai/${NAME}.conf"
USER=$(whoami)


print_usage () {
	echo ""
	echo "Start wizard with prompts:"
	echo "voxl-configure-tflite-server"
	echo ""
	echo "Shortcut configuration arguments for scripted setup."
	echo "factory_enable will reset the config file to factory defaults"
	echo "before enabling the service."
	echo ""
	echo "voxl-configure-tflite-server factory_disable"
	echo "voxl-configure-tflite-server disable"
	echo "voxl-configure-tflite-server factory_enable"
	echo "voxl-configure-tflite-server enable"
	echo ""
	echo "show this help message:"
	echo "voxl-configure-tflite-server help"
	echo ""
	exit 0
}


## set most parameters which don't have quotes in json
set_param () {
	if [ "$#" != "2" ]; then
		echo "set_param expected 2 args"
		exit 1
	fi

	# remove quotes if they exist
	var=$1
	var="${var%\"}"
	var="${var#\"}"
	val=$2
	val="${val%\"}"
	val="${val#\"}"

	sed -E -i "/\"$var\":/c\	\"$var\":	$val," ${CONFIG_FILE}
}

## set string parameters which need quotes in json
set_param_string () {
	if [ "$#" != "2" ]; then
		echo "set_param_string expected 2 args"
		exit 1
	fi
	var=$1
	var="${var%\"}"
	var="${var#\"}"
	sed -E -i "/\"$var\":/c\	\"$var\":	\"$2\"," ${CONFIG_FILE}
}

set_param_string_last () {
	if [ "$#" != "2" ]; then
		echo "set_param_string expected 2 args"
		exit 1
	fi
	var=$1
	var="${var%\"}"
	var="${var#\"}"
	sed -E -i "/\"$var\":/c\	\"$var\":	\"$2\"" ${CONFIG_FILE}
}

## set boolean parameters in JSON (true/false, no quotes)
set_param_bool () {
	if [ "$#" != "2" ]; then
		echo "set_param_bool expected 2 args"
		exit 1
	fi

	var=$1
	val=$2

	# ensure lowercase for JSON validity (true/false)
	val=$(echo "$val" | tr '[:upper:]' '[:lower:]')

	sed -E -i "/\"$var\":/c\	\"$var\":	$val," ${CONFIG_FILE}
}

disable_service_and_exit () {
	echo "disabling ${NAME} systemd service"
	systemctl disable ${SERVICE_FILE}
	echo "stopping ${NAME} systemd service"
	systemctl stop ${SERVICE_FILE}
	echo "Done configuring ${NAME}"
	exit 0
}

enable_service_and_exit () {
	echo "enabling  ${NAME} systemd service"
	systemctl enable  ${SERVICE_FILE}
	echo "starting  ${NAME} systemd service"
	systemctl restart  ${SERVICE_FILE}
	echo "Done configuring ${NAME}"
	exit 0
}

reset_config_file_to_default () {
	echo "wiping old config file"
	rm -rf ${CONFIG_FILE}
	${NAME} -c
}


################################################################################
## actual start of execution, handle optional arguments first
################################################################################

## sanity checks
if [ "${USER}" != "root" ]; then
	echo "Please run this script as root"
	exit 1
fi


## convert argument to lower case for robustness
arg=$(echo "$1" | tr '[:upper:]' '[:lower:]')

## parse arguments
case ${arg} in
	"")
		echo "Starting Wizard"
		;;
	"h"|"-h"|"help"|"--help")
		print_usage
		exit 0
		;;
	"factory_disable")
		reset_config_file_to_default
		disable_service_and_exit
		;;
	"disable")
		disable_service_and_exit
		;;
	"factory_enable")
		reset_config_file_to_default
		enable_service_and_exit
		;;
	"enable")
		enable_service_and_exit
		;;
	*)
		echo "invalid option"
		print_usage
		exit 1
esac


################################################################################
## no optional arguments, start config wizard prompts
################################################################################


echo " "
echo "Do you want to reset the config file to factory defaults?"
select opt in "yes" "no"; do
case $opt in
yes )
	reset_config_file_to_default
	break;;
no )
	echo "loading and updating config file with ${NAME} -c"
	${NAME} -c
	break;;
*)
	echo "invalid option"
	esac
done

echo " "
echo "do you want to enable or disable ${NAME}"
select opt in "enable" "disable"; do
case $opt in
enable )
	break;;
disable )
	disable_service_and_exit
	break;;
*)
	echo "invalid option"
	esac
done

echo " "
echo -e "Select a model to use with the tflite-server:\n"
options=("Mobilenet - object detection"
         "FastDepth - monocular depth estimation"
         "Deeplab - cityscapes segmentation"
         "EfficientNet - image classification"
         "Posenet - pose estimation"
         "Yolov5 - object detection"
         "Yolov8 - object detection (coco dataset)"
         "Yolov8 - object detection (custom)"
		 "Yolov11 - object detection (coco dataset)")

PS3="Enter the number corresponding to the model you want to select: "

select opt in "${options[@]}" "Quit"; do
    case $REPLY in
        1)
            set_param_string model "/usr/bin/dnn/ssdlite_mobilenet_v2_coco.tflite"
			SELECTED_MODEL="ssdlite_mobilenet_v2_coco.tflite"
			set_param_bool requires_labels true
			set_param_string labels "/usr/bin/dnn/coco_labels.txt"
			SELECTED_LABELS_DIR="/usr/bin/dnn/coco_labels.txt"
            break;;
        2)
            set_param_string model "/usr/bin/dnn/fastdepth_float16_quant.tflite"
			SELECTED_MODEL="fastdepth_float16_quant.tflite"
			set_param_bool requires_labels false
            break;;
        3)
            set_param_string model "/usr/bin/dnn/edgetpu_deeplab_321_os32_float16_quant.tflite"
			SELECTED_MODEL="edgetpu_deeplab_321_os32_float16_quant.tflite"
			set_param_bool requires_labels true
			set_param_string labels "/usr/bin/dnn/cityscapes_labels.txt"
			SELECTED_LABELS_DIR="/usr/bin/dnn/cityscapes_labels.txt"
            break;;
        4)
            set_param_string model "/usr/bin/dnn/lite-model_efficientnet_lite4_uint8_2.tflite"
			SELECTED_MODEL="lite-model_efficientnet_lite4_uint8_2.tflite"
			set_param_bool requires_labels true
			set_param_string labels "/usr/bin/dnn/imagenet_labels.txt"
			SELECTED_LABELS_DIR="/usr/bin/dnn/imagenet_labels.txt"
            break;;
        5)
            set_param_string model "/usr/bin/dnn/lite-model_movenet_singlepose_lightning_tflite_float16_4.tflite"
			SELECTED_MODEL="lite-model_movenet_singlepose_lightning_tflite_float16_4.tflite"
			set_param_bool requires_labels false
            break;;
        6)
            set_param_string model "/usr/bin/dnn/yolov5_float16_quant.tflite"
			SELECTED_MODEL="yolov5_float16_quant.tflite"
			set_param_bool requires_labels true
			set_param_string labels "/usr/bin/dnn/yolov5_labels.txt"
			SELECTED_LABELS_DIR="/usr/bin/dnn/yolov5_labels.txt"
            break;;
        7)
            set_param_string model "/usr/bin/dnn/yolov8n_float16.tflite"
			SELECTED_MODEL="yolov8n_float16.tflite"
            set_param_string labels "/usr/bin/dnn/yolov5_labels.txt"
			SELECTED_LABELS_DIR="/usr/bin/dnn/yolov5_labels.txt"
            break;;
        8)
            # For custom model
            read -p "Enter the name of the custom YOLOv8 model (.tflite): " custom_model_file
            read -p "Enter the name the custom labels file(.txt): " custom_labels_file

			custom_model_path="/usr/bin/dnn/$custom_model_file"
			custom_labels_path="/usr/bin/dnn/$custom_labels_file"
            set_param_string model "$custom_model_path"
			SELECTED_MODEL="$custom_model_path"
			set_param_bool true
            set_param_string labels "$custom_labels_path"
			SELECTED_LABELS_DIR="$custom_labels_path"
            break;;
		9) 
            set_param_string model "/usr/bin/dnn/yolov11n_float16.tflite"
			SELECTED_MODEL="yolov11n_float16.tflite"
            set_param_string labels "/usr/bin/dnn/yolov5_labels.txt"
			SELECTED_LABELS_DIR="/usr/bin/dnn/yolov5_labels.txt"
			break;;

        [Qq]*)
            echo "Quitting..."
            exit 0;;
        *)
            echo "Invalid option. Please try again.";;
    esac
done

echo "Model selected: $SELECTED_MODEL"
echo "Labels directory: $SELECTED_LABELS_DIR"

echo ""
echo "Detecting available image pipes..."
# Fetch and filter valid pipes
pipes=($(voxl-list-pipes -t camera_image_metadata_t | grep -Ev 'lepton|feat_overlay|ov_overlay|tflite'))

# Check if any valid pipes found
if [ ${#pipes[@]} -eq 0 ]; then
    echo "No valid camera pipes found."
    exit 1
fi

echo -e "Select an image sensor pipe to use with the tflite-server:\n"
PS3="Enter the number corresponding to the image sensor: "

select pipe in "${pipes[@]}" "Quit"; do
    if [[ "$pipe" == "Quit" ]]; then
        echo "Exiting."
        exit 0
    elif [[ -n "$pipe" ]]; then
        set_param_string input_pipe "/run/mpa/$pipe/"
        break
    else
        echo "Invalid option. Please try again."
    fi
done


enable_service_and_exit
# all done!
